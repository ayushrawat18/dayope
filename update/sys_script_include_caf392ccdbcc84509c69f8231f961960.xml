<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_cmp_rof.FilterUtils</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>FilterUtils</name>
        <script><![CDATA[var FilterUtils = Class.create();
FilterUtils.prototype = {
    initialize: function() {
		this.filterTable = 'x_snc_cmp_rof_resource_operation_filter';
		
		this.ldcTypeFilterType = 'datacenter_types';
		this.ldcFilterType = 'logical_datacenters';
		this.ciAttributeFilterType = 'ci_attributes';
		this.scriptFilterType = 'custom_script';
		
		this.hostedOnRelId = '5f985e0ec0a8010e00a9714f2a172815';
		this.hostedOnRelName = 'Hosted on::Hosts';
		
		var ldcTable = 'cmdb_ci_logical_datacenter';
		var ldcHierarchy_GTH = new GlideTableHierarchy(ldcTable);
		this.ldcTableList = ldcHierarchy_GTH.getAllExtensions();
    },
	
	filterResourceOperations: function(rbOperations,ciId,ciTable){
		if (ciTable == 'sn_cmp_stack') return rbOperations;
		
		var ci_GR = new GlideRecord(ciTable);
		if (!ci_GR.get(ciId)) return rbOperations;
		
		var ciLDC_GR = this._getCiLDC_GR(ciId,ciTable);
		var filteredOperations = [];
		
		for(var i=0;i<rbOperations.length;i++){
			if (!this._checkLDCType(ciLDC_GR,ci_GR,rbOperations[i])) continue;
			if (!this._checkLDC(ciLDC_GR,ci_GR,rbOperations[i])) continue;
			if (!this._checkCIAttributes(ci_GR,rbOperations[i])) continue;
			if (!this._checkScript(ciLDC_GR,ci_GR,rbOperations[i])) continue;
			
			filteredOperations.push(rbOperations[i]);
		}
		
		return filteredOperations;
	},
	
	_getCiLDC_GR: function(ciId,ciTable){
		var ci_GR = new GlideRecord(ciTable);
		
		ci_GR.get(ciId);
		
		var ciRel_GR = new GlideRecord('cmdb_rel_ci');
		var relTypeCondition = ciRel_GR.addQuery('type',this.hostedOnRelId);
		relTypeCondition.addOrCondition('type.name',this.hostedOnRelName);
		ciRel_GR.addQuery('child.sys_class_name',this.ldcTableList);
		ciRel_GR.addQuery('parent',ciId);
		ciRel_GR.query();
		
		if(ciRel_GR.next()) return ciRel_GR.child.getRefRecord();
	},
	
	_getFilterGR: function(filterType,ciTableName,operationId){
		var filter_GR = new GlideRecord(this.filterTable);
		filter_GR.addActiveQuery();
		filter_GR.addQuery('filter_type',filterType);
		filter_GR.addQuery('ci_type',ciTableName);
		filter_GR.addQuery('resource_operation.operation',operationId);
		filter_GR.query();
		
		return filter_GR;
		
	},
	
	_checkLDCType: function(ciLDC_GR,ci_GR,rbOperation){
		var filter_GR = this._getFilterGR(this.ldcTypeFilterType,ci_GR,rbOperation.operationId);
				
		filterTest: while(filter_GR.next()){
			var splitLDCTypes = filter_GR.datacenter_types.getDisplayValue().split(', ');
			
			for(var i=0;i<splitLDCTypes.length;i++){
				if (splitLDCTypes[i] == ciLDC_GR.sys_class_name.getDisplayValue()) continue filterTest;
			}
			return false;
		}
		return true;	
	},
	
	_checkLDC: function(ciLDC_GR,ci_GR,rbOperation){
		var filter_GR = this._getFilterGR(this.ldcFilterType,ci_GR,rbOperation.operationId);
					
		filterTest: while(filter_GR.next()){
			var splitLDCs = filter_GR.logical_datacenters.toString().split(',');
			
			for(var i=0;i<splitLDCs.length;i++){
				if (splitLDCs[i] == ciLDC_GR.sys_id) continue filterTest;
			}
			return false;
		}
		return true;	
	},
	
	_checkCIAttributes: function(ci_GR,rbOperation){
		var filter_GR = this._getFilterGR(this.ciAttributeFilterType,ci_GR,rbOperation.operationId);
					
		filterTest: while(filter_GR.next()){
			if (GlideFilter.checkRecord(ci_GR,filter_GR.ci_filter)) continue filterTest;
			return false;
		}
		return true;
	},
	
	_checkScript: function(ciLDC_GR,ci_GR,rbOperation){
		var filter_GR = this._getFilterGR(this.scriptFilterType,ci_GR,rbOperation.operationId);
					
		filterTest: while(filter_GR.next()){
			var scriptVars = {};
			scriptVars.ciId = ci_GR.sys_id;
			scriptVars.ciTable = ci_GR.sys_class_name;
			scriptVars.ldcId = ciLDC_GR.sys_id;
			scriptVars.rbOperationName = rbOperation.operationName;
			scriptVars.rbOperationId = rbOperation.operationId;
			
			var evaluator = new GlideScopedEvaluator();
			if (evaluator.evaluateScript(filter_GR, 'filter_script', scriptVars)) continue filterTest;
			return false;
		}
		return true;
	},

    type: 'FilterUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>eric.williams@snc</sys_created_by>
        <sys_created_on>2019-09-17 22:00:03</sys_created_on>
        <sys_id>caf392ccdbcc84509c69f8231f961960</sys_id>
        <sys_mod_count>52</sys_mod_count>
        <sys_name>FilterUtils</sys_name>
        <sys_package display_value="CMP Resource Operation Filters" source="x_snc_cmp_rof">0cf85140db4c84509c69f8231f96199f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CMP Resource Operation Filters">0cf85140db4c84509c69f8231f96199f</sys_scope>
        <sys_update_name>sys_script_include_caf392ccdbcc84509c69f8231f961960</sys_update_name>
        <sys_updated_by>eric.williams@snc</sys_updated_by>
        <sys_updated_on>2019-09-30 20:48:58</sys_updated_on>
    </sys_script_include>
</record_update>
